<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ardika Rommy Sanjaya</title>
    <description>Catatan suka2, nulisn suka2.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Apr 2020 06:18:44 +0000</pubDate>
    <lastBuildDate>Mon, 13 Apr 2020 06:18:44 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>ARP - MITM Detection Method</title>
        <description>&lt;p&gt;Sedikit tengan ARP&lt;/p&gt;

&lt;p&gt;ARP merupakan protokol yang digunakan untuk memetakan alamat fisik (MAC) dan logika (IP). Proses pemetaan ini sering dimanfaatkan oleh penyerang dengan cara memalsukan isi dari peta (ARP table) tersebut sehingga ia dapat menguasai komunikasi yang bergantung pada isi dari peta tersebut (routing).&lt;/p&gt;

&lt;p&gt;Berikut metode yang saya gunakan untuk mendeteksi proses pemalsuan tersebut.&lt;/p&gt;

&lt;p&gt;Disini saya menggunakan TCP-Syn untuk memancing penyerang. Kenapa? Karena jika menggunakan protokol seperti ICMP maka penyerang bisa saja membuat firewall untuk mem-blok semua paket ICMP yang datang.&lt;/p&gt;

&lt;p&gt;Dengan menggunakan TCP-Syn dengan port yang kita buat acak, pengerang tentu tidak dapat menebak port tersebut dan memblok nya.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Di bawah ini adalah coret2 saya dahulu kala.&lt;/p&gt;

&lt;figure class=&quot;aligncenter&quot;&gt;
    &lt;img src=&quot;/uploads/2019-08-31-arp-mitm-detaction-method-1.png&quot; /&gt;
&lt;/figure&gt;

&lt;figure class=&quot;aligncenter&quot;&gt;
    &lt;img src=&quot;/uploads/2019-08-31-arp-mitm-detaction-method-2.png&quot; /&gt;
&lt;/figure&gt;

&lt;figure class=&quot;aligncenter&quot;&gt;
    &lt;img src=&quot;/uploads/2019-08-31-arp-mitm-detaction-method-3.png&quot; /&gt;
&lt;/figure&gt;

&lt;figure class=&quot;aligncenter&quot;&gt;
    &lt;img src=&quot;/uploads/2019-08-31-arp-mitm-detaction-method-4.png&quot; /&gt;
&lt;/figure&gt;
</description>
        <pubDate>Sat, 31 Aug 2019 17:45:00 +0000</pubDate>
        <link>/post/security/arp-mitm-detaction-method.html</link>
        <guid isPermaLink="true">/post/security/arp-mitm-detaction-method.html</guid>
        
        <category>mitm</category>
        
        <category>security</category>
        
        <category>networking</category>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>RSA Small Key Problem</title>
        <description>&lt;p&gt;Given public key = (7, 33).&lt;/p&gt;

&lt;p&gt;Find private key (d).&lt;/p&gt;

&lt;p&gt;n = 33 (modulus)&lt;/p&gt;

&lt;p&gt;e = 7 (exponent)&lt;/p&gt;

&lt;p&gt;let’s factoring n&lt;/p&gt;

&lt;p&gt;n = p * q&lt;/p&gt;

&lt;p&gt;33 = ? * ?&lt;/p&gt;

&lt;p&gt;floor(sqrt(n)) = floor(sqrt(33)) = 5&lt;/p&gt;

&lt;p&gt;33 mod 5 = 3 « not 0&lt;/p&gt;

&lt;p&gt;33 mod 4 = 1 « no need to test (except for 2 all other prime numbers are odd)&lt;/p&gt;

&lt;p&gt;33 mod 3 = 0 « we got p = 3&lt;/p&gt;

&lt;p&gt;p = 3&lt;/p&gt;

&lt;p&gt;33 = 3 * ?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;q = n / p&lt;/p&gt;

&lt;p&gt;= 33 / 3&lt;/p&gt;

&lt;p&gt;= 11&lt;/p&gt;

&lt;p&gt;n = p * q&lt;/p&gt;

&lt;p&gt;= 3 * 33&lt;/p&gt;

&lt;p&gt;phi = ((p-1) * (q-1))&lt;/p&gt;

&lt;p&gt;= (2 * 10)&lt;/p&gt;

&lt;p&gt;= 20&lt;/p&gt;

&lt;p&gt;e * ? mod 20 = 1&lt;/p&gt;

&lt;p&gt;7 * ? mod 20 = 1  « modInv&lt;/p&gt;

&lt;p&gt;7 * 3 mod 20 = 1&lt;/p&gt;

&lt;p&gt;ok, d = 3&lt;/p&gt;

&lt;p&gt;private key (d) = (3, 33)&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Aug 2019 03:39:00 +0000</pubDate>
        <link>/post/security/rsa-small-key-problem.html</link>
        <guid isPermaLink="true">/post/security/rsa-small-key-problem.html</guid>
        
        <category>algorithm</category>
        
        <category>math</category>
        
        <category>security</category>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>RSA Algorithm</title>
        <description>&lt;p&gt;Key Generation&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Generate two random primes, p and q, e.g p=3, q=11.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compute n = pq, n = 3 * 11 = 33.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compute phi = (p-1)(q-1) = (3-1)(11-1) = 20&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose an integer e, 1 &amp;lt; e &amp;lt; phi, such that gcd(e, phi) = 1, e.g e = 7, gcd(7, 20) = 1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compute the secret exponent d, 1 &amp;lt; d &amp;lt; phi, such that (e * d) mod phi = 1, (7 * d) mod 20 = 1,  d = 3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;ol&gt;
  &lt;li&gt;The public key is (7, 33) and the private key (3, 33).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Encrypt&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;m = 2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;c = 2^7 mod 33 = 29&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Decrypt&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;c = 29&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;m = 29 ^ 3 mod&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;n is known as the modulus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;e is known as the public exponent or encryption exponent or just the exponent.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;d is known as the secret exponent or decryption exponent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 30 Aug 2019 05:34:00 +0000</pubDate>
        <link>/post/cryptography/rsa-example.html</link>
        <guid isPermaLink="true">/post/cryptography/rsa-example.html</guid>
        
        <category>cryptography</category>
        
        <category>security</category>
        
        <category>math</category>
        
        <category>algorithm</category>
        
        
        <category>cryptography</category>
        
      </item>
    
      <item>
        <title>Miller Rabin</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/primality-test-set-3-miller-rabin&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 15:23:00 +0000</pubDate>
        <link>/post/math/miller-rabin.html</link>
        <guid isPermaLink="true">/post/math/miller-rabin.html</guid>
        
        <category>cryptography</category>
        
        <category>security</category>
        
        <category>math</category>
        
        <category>algorithm</category>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>Square and Multiply</title>
        <description>&lt;p&gt;11^37 = ?&lt;/p&gt;

&lt;p&gt;37 = 100101 in binary&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1 -&amp;gt; fist one list number          = 11&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0 -&amp;gt; square                                    = (11)^2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0 -&amp;gt; square                                    = ((11)^2)^2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1 -&amp;gt; square + multiply              = (((11)^2)^2)^2*11&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0 -&amp;gt; square                                    = ((((11)^2)^2)^2*11)^2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1 -&amp;gt; square + multiply              = (((((11)^2)^2)^2*11)^2)^2*11&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;simple-implementation-in-python&quot;&gt;Simple implementation in python&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# x ^ h mod n
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modPow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# convert h into binary
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 14:35:00 +0000</pubDate>
        <link>/post/math/square-and-multiply-example.html</link>
        <guid isPermaLink="true">/post/math/square-and-multiply-example.html</guid>
        
        <category>cryptography</category>
        
        <category>security</category>
        
        <category>math</category>
        
        <category>algorithm</category>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>Extended Euclidean</title>
        <description>&lt;p&gt;gcd(11, 17) == 1&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
17 = 11(1) + 6    // 1 is floor(17/11), 6 is 17 mod 11
11 = 6(1) + 5
6 = 5(1) + 1      // done

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;implementation-in-python-src&quot;&gt;Implementation in python &lt;a href=&quot;https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm&quot;&gt;(src)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 10:41:00 +0000</pubDate>
        <link>/post/math/extended-euclidean-example.html</link>
        <guid isPermaLink="true">/post/math/extended-euclidean-example.html</guid>
        
        <category>cryptography</category>
        
        <category>security</category>
        
        <category>math</category>
        
        <category>algorithm</category>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>Diffie Hellman MITM Attack</title>
        <description>&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = prime number (public)
g = modulus (public)

a = Alice private key (private)
b = Bob private key (private)

A = Alice public key (public)
B = Bob public ket = (public)

Sx = Shared key (public)

eA = Eve private key for Alice (private)
eB = Eve private key for Bob (private)
Ea = Spoofed Alice public key will sent to Bob (public)
Eb = Spoofed Bob public key will sent to Alice (public)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--more--&gt;

&lt;h3 id=&quot;diffie-hellman-algorithm&quot;&gt;Diffie Hellman Algorithm&lt;/h3&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = 23, g = 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| a = 4                                      | b = 3                                         |
|--------------------------------------------|-----------------------------------------------|
| A = g ^ a mod p = 5 ^ 4 mod 23 = 4         | B = g ^ b mod p = 5 ^ 3 mod 23 = 10           |
| Sent Alice public key (A) to Bob           | Sent Bob public key (B) to Alice              |
| Bob public key (B) is 10                   | Alice public key (A) is 4                     |
| Compute shared key from Bob pubic key (B)  | Compute shared key from Alice public key (A)  |
| Sa = B ^ a mod p = 10 ^ 4 mod 23 = 18      | Sb = A ^ b mod p = 4 ^ 3 mod 23 = 18          |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sa == Sb
Discrete logarithm problem (A = g ^ ? mod p &amp;amp;&amp;amp; B ^ ? mod p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mitm-attack&quot;&gt;MITM Attack&lt;/h3&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = 23, g = 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| a = 4                                            | eA = 6, eB = 9                                | b = 3                                              |	
|--------------------------------------------------|-----------------------------------------------|----------------------------------------------------|
| A = g ^ a mod p = 5 ^ 4 mod 23 = 4               | Eb = g ^ eB mod p = 5 ^ 9 mod 23 = 11         | -                                                  |	
| Sent Alice public key (A) to Bob (Eve)           | Sent Spoofed Bob public key (Ea) to Alice     | -                                                  |
| Bob (Eve) public key (Eb) is 11                  | Alice public key (A) is 4                     | -                                                  |
| Compute shared key from Bob (Eve) pubic key (Eb) | Compute shared key from Alice public key (A)  | -                                                  |
| Sae = Eb ^ a mod p = 11 ^ 3 mod 23 = 13          | Sa = A ^ eB mod p = 4 ^ 9 mod 23 = 13         | -                                                  |
| -                                                | Ea = g ^ eA mod p = 5 ^ 6 mod 23 = 8          | B = g ^ b mod p = 5 ^ 3 mod 23 = 10                |
| -                                                | Sent Spoofed Alice public key (Eb) to Bob     | Sent Bob public key (B) to Alice (Eve)             |
| -                                                | Bob public key (B) is 10                      | Alice (Eve) public key (Ea) is 8                   |
| -                                                | Compute shared key from Bob public key (B)    | Compute shared key from Alice (Eve) pubic key (Ea) |
| -                                                | Sb = B ^ eA mod p = 10 ^ 6 mod 23 = 6         | Sbe = Ea ^ b mod p = 8 ^ 3 mod 23 = 6              |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Now Eve can intercept all data between Alice and Bob)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ardikars/ardikars.github.io/blob/master/_posts/2019-08-29-diffie-hellman-mitm-attack.markdown&quot;&gt;Click here for original 'markdown file'&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 10:41:00 +0000</pubDate>
        <link>/post/security/diffie-hellman-mitm-attack.html</link>
        <guid isPermaLink="true">/post/security/diffie-hellman-mitm-attack.html</guid>
        
        <category>cryptography</category>
        
        <category>security</category>
        
        <category>math</category>
        
        <category>mitm</category>
        
        
        <category>security</category>
        
      </item>
    
  </channel>
</rss>
